grammar xyz.elite.xtext.languages.plantuml.PlantUML
    hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate plantUML "http://www.elite.xyz/xtext/languages/plantuml/PlantUML"

Model:
    NEWLINE* 'SEQUENCE'? sequence_diagrams+=SQ_Diagram NEWLINE*;

SQ_Diagram:
    {SQ_Diagram}
    '@startuml' (NEWLINE | elements+=SQ_SequenceElement)* '@enduml';

// ---------------------------
//      SEQUENCE ELEMENTS
// ---------------------------
SQ_SequenceElement:
    NEWLINE 
    (
        SQ_Message
        | SQ_ParticipantDefiniton
        | SQ_Autonumber
        | SQ_PageMetaInfo
        | SQ_Group
        | SQ_Note
        | SQ_Divider
        | SQ_Ref
        | SQ_Delay
        | SQ_Space
        | SQ_LifelineCtrl
        | SQ_Autolifeline
        | SQ_Return
        | SQ_Encompass
        | SQ_HideFootbox
        | SQ_Skinparam
    );

// -------- MESSAGES --------
SQ_Message:
    (
        ('[' arrow=SQ_Arrow receiver=SQ_Participant) 
        | (sender=SQ_Participant arrow=SQ_Arrow receiver=SQ_Participant)
        | (sender=SQ_Participant arrow=SQ_Arrow ']')
    )  
    (receiverlifetime=SQ_LifetimeHint)?
    (':' payload=(PT_RequestResponse)? description=SQ_Description)?;

SQ_Arrow:
    leftmodifier=(SQ_ArrowEndModifier)?
    (
        (
            lefttip=SQ_ArrowLeftTip 
            ((('[' color=SQ_Color']')? line+='-') | (line+='-' ('[' color=SQ_Color']')? '-'))
        )
        |
        (
            ((line+='-' ('[' color=SQ_Color ']')?) | (line+='-' ('[' color=SQ_Color ']')? '-')) 
            righttip=SQ_ArrowRightTip
        )
        | 
        (
            lefttip=SQ_ArrowLeftTip
            (line+='-' | (line+='-' ('[' color=SQ_Color ']')? line+='-')) 
            righttip=SQ_ArrowRightTip
        )
    )
    rightmodifier=(SQ_ArrowEndModifier)?;

SQ_ArrowEndModifier:
    'x' | 'o';

SQ_ArrowRightTip:
    '>' '>'? | '\\' '\\'? | '/' '/'?;

SQ_ArrowLeftTip:
    '<' '<'? | '\\' '\\'? | '/' '/'?;

SQ_Description:
    (
        ID | STRING | INT | HEXCOLOR | NAMEDCOLOR | CONTROL_CHARACTER | ANY_OTHER | PT_TimeUnit |
        'SEQUENCE' | ',' | '(' | ')' | '[' | ']' | '{' | '}' | '#' | '|' | '-' | '<' | '>' |
        'x' | 'o' | '\\' | '/' | 'as' | 'order' | SQ_ParticipantKeyword |
        'autonumber' | 'stop' | 'resume' | SQ_PageMetaInfoKeyword | PT_RequestMethod | 
        SQ_GroupEntryKeyword | 'else' | 'end' | SQ_NoteType | 'left' | 'right' | 'over' | 
        'of' | SQ_LifelineKeyword | 'autoactivate' | 'on' | 'off' | 'return' | 'create' |
        '!' | '*' | '+' | 'box' | 'hide' | 'footbox' | 'skinparam' | 'ref' | '...' | '==' | ':'
    )*;

// -------- DEFINING PARTICIPANTS --------
SQ_ParticipantDefiniton:
    (('create' keyword=(SQ_ParticipantKeyword)?) | keyword=SQ_ParticipantKeyword) participant=SQ_Participant ('order' priority=INT)?;

SQ_ParticipantKeyword:
    'actor'|'boundary'|'control'|'collections'|'entity'|'database'|'participant';

SQ_Participant:
    (((longform=ID | longform=STRING) ('as' name=ID)) | (name=ID | name=STRING))
    (stereotype=SQ_Stereotype)?
    (color=SQ_Color)?;

SQ_Stereotype:
    '<' '<' (
        (('(' char=ID ',' color=SQ_Color ')')? name=ID) 
        | 
        (('(' char=ID ',' color=SQ_Color ')'))
    ) '>' '>';

SQ_Color:
    color=HEXCOLOR | color=NAMEDCOLOR;

// -------- AUTONUMBERING --------
SQ_Autonumber:
    'autonumber' ('stop' | 'resume')? (start=INT | start=INT step=INT)? format=(STRING)?;

// -------- PAGE META/FORMATTING INFORMATION --------
SQ_PageMetaInfo:
    keyword=SQ_PageMetaInfoKeyword content=SQ_Description;

SQ_PageMetaInfoKeyword:
    'header'|'footer'|'title'|'newpage';

SQ_HideFootbox:
    'hide' 'footbox';

// -------- GROUPS --------
SQ_Group:
    keyword=SQ_GroupEntryKeyword label=SQ_Description 
        (NEWLINE | elements+=SQ_SequenceElement)* 
    alternatives+=(SQ_GroupAlternative)*
    NEWLINE 'end';

SQ_GroupAlternative:
    NEWLINE 'else' label=SQ_Description
        (NEWLINE | elements+=SQ_SequenceElement)*;

SQ_GroupEntryKeyword:
    'alt'|'opt'|'loop'|'par'|'break'|'critical'|'group';

// -------- NOTES --------
SQ_Note:
    type=SQ_NoteType
    (
        (('left'|'right') ('of' anchors+=[SQ_Participant])?)
        | 
        ('over' anchors+=[SQ_Participant] (',' anchors+=[SQ_Participant])*)
    )
    color=(SQ_Color)?
    ':' content=SQ_Description;

SQ_NoteType:
    'note' | 'hnote' | 'rnote';

// -------- DIVIDER --------
SQ_Divider:
    '==' label=SQ_Description;

// -------- REF --------
SQ_Ref:
    'ref' 'over' anchors+=[SQ_Participant] (',' anchors+=[SQ_Participant])* ':' content=SQ_Description;

// -------- DELAY --------
SQ_Delay:
    '...' (wait=PT_Wait)? description=SQ_Description;

// -------- SPACE --------
SQ_Space:
    '|' '|' ('|' | (height=INT '|' '|'));


// -------- LIFELINES --------
SQ_LifelineCtrl:
    keyword=SQ_LifelineKeyword (participant=[SQ_Participant|ID] | participant=[SQ_Participant|STRING]) (color=SQ_Color)?;

SQ_LifelineKeyword:
    'activate' | 'deactivate' | 'destroy';

SQ_Autolifeline:
    'autoactivate' mode=('on' | 'off');

SQ_LifetimeHint:
    '*' '*' | '!' '!' | '+' '+' | '-' '-';

SQ_Return:
    'return' (response=PT_Response)? label=SQ_Description;

// -------- ENCOMPASS --------
SQ_Encompass:
    'box' title=STRING color=SQ_Color
        (NEWLINE | elements+=SQ_SequenceElement)*
    NEWLINE 'end' 'box';

// -------- SKINPARAM --------
SQ_Skinparam:
    'skinparam' name=ID value=SQ_SkinparamValue;

SQ_SkinparamValue: 
        SQ_Color | INT | ID | STRING;

// ----------------------------
//   PLANTESTIC MODIFICATIONS
// ----------------------------
PT_Wait:
    'wait(' time=INT unit=PT_TimeUnit ')';

PT_RequestResponse:
    PT_Request | PT_Response;

PT_Request returns PT_RequestResponse:
    {PT_Request}
    'request(' method=PT_RequestMethod ',' url=STRING (',' parametermap=(PT_ParameterMap))? ')';

PT_RequestMethod:
    'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';

PT_Response returns PT_RequestResponse:
    {PT_Response}
    'response(' acceptedcodes+=PT_ResponseCode ('|' '|' acceptedcodes+=PT_ResponseCode)* (',' parametermap=(PT_ParameterMap))? ')';

PT_ResponseCode:
    code=INT description=(ID)?;

PT_ParameterMap:
    ('{' (param+=PT_Parameter (',' param+=PT_Parameter)*)? '}');

PT_Parameter:
    {PT_Parameter}
    name=ID (':' value=PT_ParameterValue)?;

PT_ParameterValue:
    ID | STRING | INT;

PT_TimeUnit:
    'ns'|'ms'|'s'|'min'|'h'|'d';

// ----------------------------
//      LEXER/PARSER ATOMS
// ----------------------------
terminal HEXCOLOR:
    '#' 
    (
         ('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')
        (('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9')('a'..'f'|'A'..'F'|'0'..'9'))?
    );

terminal NAMEDCOLOR:
    '#' ('a'..'z'|'A'..'Z')+;

terminal ID:
    ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

terminal INT returns ecore::EInt:
    ('0'..'9')+;

terminal STRING:
    '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"';

// NEWLINE has to be a visible terminal in this grammar since it has a semantic meaning (end of sequence element)
terminal NEWLINE:
    '\r'? '\n';

terminal CONTROL_CHARACTER:
    '\\' ( 'b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\');

// ----------------------
//    HIDDEN TERMINALS
// ----------------------
terminal ML_COMMENT:
    "/'" -> "'/";

terminal SL_COMMENT:
    "'" !('\n'|'\r')*;

terminal WS:
    (' '|'\t')+;

// ----------------------
//   CONSUME REMAINDER
// ----------------------
terminal ANY_OTHER:
    // this rule consumes any remaining tokens
    .;