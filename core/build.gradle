plugins {
    id "org.jetbrains.kotlin.jvm"
    id "org.jetbrains.kotlin.plugin.allopen"
    id "org.jetbrains.kotlin.plugin.noarg"
    id "application"
    id "idea"
    id "eclipse"
    id 'maven-publish'
}
mainClassName = "de.unia.se.plantestic.Main"

jar {
    manifest {
        attributes "Main-Class": "de.unia.se.plantestic.Main"
    }
}

repositories {
    maven {
        url rootProject.file('eclipse-repo/maven')
        metadataSources {
            mavenPom() // https://github.com/diffplug/goomph/commit/6271361598ef7c1d1fd4a45053fad46645554fb0
            artifact() // https://github.com/diffplug/goomph/issues/106
        }
    }
    mavenCentral()
}

test {
    useJUnitPlatform()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "com.github.ajalt:clikt:2.2.0"

    implementation project(":xyz.elite.xtext.languages.plantuml")

    // emf
    implementation "eclipse-p2:org.eclipse.emf.common:+"
    implementation "eclipse-p2:org.eclipse.emf.ecore:+"
    implementation "eclipse-p2:org.eclipse.emf.ecore.xmi:+"

    // qvt
    implementation "eclipse-p2:org.eclipse.m2m.qvt.oml:+"
    implementation "eclipse-p2:org.eclipse.m2m.qvt.oml.common:+"
    implementation "eclipse-p2:org.eclipse.m2m.qvt.oml.cst.parser:+"
    implementation "eclipse-p2:org.eclipse.m2m.qvt.oml.ecore.imperativeocl:+"
    implementation "eclipse-p2:org.eclipse.m2m.qvt.oml.emf.util:+"

    // ocl
    implementation "eclipse-p2:org.eclipse.ocl:+"
    implementation "eclipse-p2:org.eclipse.ocl.common:+"
    implementation "eclipse-p2:org.eclipse.ocl.ecore:+"

    // uml2
    implementation "eclipse-p2:org.eclipse.uml2.common:+"
    implementation "eclipse-p2:org.eclipse.uml2.types:+"
    implementation "eclipse-p2:org.eclipse.uml2.uml:+"

    // acceleo
    implementation "eclipse-p2:org.eclipse.acceleo.engine:+"
    implementation "eclipse-p2:org.eclipse.acceleo.parser:+"
    implementation "eclipse-p2:org.eclipse.acceleo.common:+"
    implementation "eclipse-p2:org.eclipse.acceleo.model:+"

    // runtime
    implementation "eclipse-p2:org.eclipse.core.runtime:+"
    implementation "eclipse-p2:org.eclipse.core.contenttype:+"
    implementation "eclipse-p2:org.eclipse.equinox.common:+" // fixes: https://github.com/eclipse/xtext/issues/1231
    implementation "eclipse-p2:org.eclipse.equinox.registry:+"

    // very legacy dependency, missing runtime depenencies
    runtimeOnly group: 'lpg.runtime', name: 'java', version: '2.0.17-v201004271640'
    runtimeOnly group: 'org.osgi', name: 'org.osgi.service.prefs', version: '1.1.1'

    testImplementation "io.kotlintest:kotlintest-runner-junit5:3.1.7"
    testImplementation "io.mockk:mockk:1.8.9"

    // End-2-End Test
    testImplementation "org.jooq:joor-java-8:0.9.12"
    testImplementation "com.github.tomakehurst:wiremock:2.24.0"

    // Needed for running the dynamically compiled test code (runtime dependencies)
    testRuntimeOnly "org.apache.commons:commons-text:1.7"
    testRuntimeOnly "io.rest-assured:rest-assured:3.0.0"
    testRuntimeOnly "javax.xml.bind:jaxb-api:2.3.1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.3.1"
    testRuntimeOnly "com.atlassian.oai:swagger-request-validator-core:2.10"
    testRuntimeOnly "com.atlassian.oai:swagger-request-validator-restassured:2.10.0"

    ktlint "com.github.shyiko:ktlint:0.29.0"
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    // To generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.0
            }
        }
    }
}

apply from: "$rootDir/gradle/maven-publish.gradle"
