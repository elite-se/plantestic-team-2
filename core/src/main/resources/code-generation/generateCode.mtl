[comment encoding = UTF-8 /]
[module generateCode('http://elite-se.xyz/TestScenario')]

[template public generateTestScenario(testScenario : TestScenario) post(trim())]
[comment @main /]
[file ('Test_'.concat(testScenario.testScenarioName.concat('.java')), false, 'UTF-8')]

import org.apache.commons.text.StringSubstitutor;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import java.util.HashMap;
import java.util.Map;

public class [ 'Test'.concat(testScenario.testScenarioName) /] {

	Map<String, String> paramsMap;
	ScriptEngine engine;
	StringSubstitutor substitutor;

    @BeforeEach
	public void setup() {
	    paramsMap = new HashMap<>(System.getenv());
	    substitutor = new StringSubstitutor(paramsMap);
		engine = new ScriptEngineManager().getEngineByName("JavaScript");
	}

    [if (testScenario.configs->notEmpty())]
    [for (config : Config | testScenario.configs) ]
    [generateTest(testScenario, config, testScenario.configs->indexOf(config).toString()) /]

	[/for]
	[else]
    [generateTest(testScenario, null, '') /]
	[/if]

    /// Helper method to make to templating in string variables above more clean.
	private String subst(String source) {
	    assert substitutor != null;
	    return substitutor.replace(source);
	}

	/// Helper method to make evaluation of conditions more clean.
	private boolean eval(String condition) throws ScriptException {
	    assert engine != null;
	    // First, run the templating engine over the condition.
	    // This is the whole reason why we do this "evaluate a JS string at runtime" at all.
	    String substCondition = subst(condition);
	    // Second, we can simply pipe the string through the JavaScript engine and get a result.
	    return (Boolean) engine.eval(substCondition);
	}

    /// Helper method to flatten the tree-like structure of a TOML file.
    /// Here, we use the path of an item as the key and the item itself as the value.
    /// The path of an item separated by dots, e.g. "A.B.item".
	private static Map<String, Object> unnestTomlMap(String prefix, Map<String, Object> tree) {
        Map<String, Object> resultMap = new HashMap<>();
        for (Map.Entry<String, Object> entry : tree.entrySet()) {
            String identifierPath = prefix + entry.getKey();
            if(entry.getValue() instanceof Map){
                resultMap.putAll(unnestTomlMap(identifierPath + ".", (Map<String, Object>)entry.getValue()));
            } else {
                resultMap.put(identifierPath, entry.getValue());
            }
        }
        return resultMap;
	}
}
[/file]
[/template]

[template private generateTest(testScenario : TestScenario, config : Config, nameSuffix : String) post(trim())]
@Test
public void test[ nameSuffix /]() {
[if (not config.entries->oclIsUndefined())]
[for (entry : ConfigEntry | config.entries) ]
    paramsMap.put("[ entry.key /]", "[ entry.value /]");
[/for]
[/if]
    String tester = paramsMap.get("tester");

	[generateStructures(testScenario.structure)/]
}
[/template]

[template private generateStructures(structures : Collection(Structure)) post(trim())]
[for (structure : Structure | structures) separator('\n') ]
[generateStructure(structure)/]
[/for]
[/template]

[template private generateStructure(structure : Structure) post(trim())]
[if (structure.oclIsTypeOf(TestRoundtrip))]
[generateTestRoundtripWithTesterCheck(structure.oclAsType(TestRoundtrip))/]
[elseif (structure.oclIsTypeOf(Alternative))]
[generateAlternative(structure.oclAsType(Alternative))/]
[/if]
[/template] 

[template private generateAlternative(alternative : Alternative) post(trim())]
[if (alternative.condition.oclIsUndefined())]
[generateStructures(alternative.provided)/]
[else][if (alternative.provided->isEmpty() and alternative.otherwise->notEmpty())]
if (!eval("[alternative.condition/]")) {
	[generateStructure(alternative.otherwise)/]
}
[else]
if (eval("[alternative.condition/]")) {
	[generateStructures(alternative.provided)/]
}[if (alternative.otherwise->notEmpty())] else {
	[generateStructure(alternative.otherwise)/]
}[/if]
[/if][/if]
[/template]

[template private generateTestRoundtripWithTesterCheck(testRoundtrip : TestRoundtrip) post(trim())]
if (tester == null || tester.equals("[testRoundtrip.requestspecification.sender/]")) {
    [testRoundtrip.generateTestRoundtrip()/]
}
[/template]

[template private generateTestRoundtrip(testRoundtrip : TestRoundtrip) post(trim())]
	[if (testRoundtrip.requestspecification.requestdatum->notEmpty())][testRoundtrip.requestspecification.generateAddRequestParams()/]	[/if]
Response [testRoundtrip.testRoundtripName/] = RestAssured.given()
        [testRoundtrip.requestspecification.generateGivenPart()/]
    .when()
        [testRoundtrip.requestspecification.generateWhenPart()/]
    .then()
        [testRoundtrip.responsespecification.generateThenPart()/];
[if (testRoundtrip.responsespecification.responsedatum->notEmpty())]
[testRoundtrip.generateExtractions()/]
	[/if]
[/template]

[template private generateAddRequestParams(requestSpecification : RequestSpecification)]
	[if (requestSpecification.requestdatum->notEmpty())]
		[for (requestDatum : RequestDatum | requestSpecification.requestdatum)]
paramsMap.put("[requestDatum.variableName/]", "[requestDatum.value/]");
		[/for]
	[/if]
[/template]

[template private generateGivenPart(requestSpecification : RequestSpecification) post(trim())]
.auth().basic(subst("${[requestSpecification.receiver/].username}"), subst("${[requestSpecification.receiver/].password}"))
	[if (requestSpecification.requestdatum->notEmpty())]
		[for (requestDatum : RequestDatum | requestSpecification.requestdatum)]
.param("[requestDatum.variableName/]", subst("${[requestDatum.variableName/]}"))
		[/for]
	[/if]
[/template]

[template private generateWhenPart(requestSpecification : RequestSpecification) post(trim())]
	.[requestSpecification.method.toLower()/](subst("${[requestSpecification.receiver/].path}") + subst("[requestSpecification.url/]"))
[/template]

[template private generateThenPart(responseSpecification : ResponseSpecification) post(trim())]
	.assertThat()
    [responseSpecification.generateExpectStatusCode()/]
    [responseSpecification.generateExpectations()/]
	.and().extract().response()
[/template]

[template private generateExpectStatusCode(responseSpecification : ResponseSpecification) post(trim())]
	[if (responseSpecification.statuscode->notEmpty())]
.statusCode(IsIn.isIn(Arrays.asList([for (val : Integer | responseSpecification.statuscode) separator (', ')][val/][/for])))
	[/if]
[/template]

[template private generateExpectations(responseSpecification : ResponseSpecification) post(trim())]
	[for (datum : ResponseDatum | responseSpecification.responsedatum)]
.body(hasXPath("[datum.variableName/]"))
	[/for]
[/template]

[template private generateExtractions(testRoundtrip : TestRoundtrip) post(trim())]
	[for (responseDatum : ResponseDatum | testRoundtrip.responsespecification.responsedatum)]
paramsMap.put("[responseDatum.variableName/]", [testRoundtrip.testRoundtripName/].jsonPath().getString("[responseDatum.variableName/]"));
	[/for]
[/template]
