[comment encoding = UTF-8 /]
[module generateCode('http://elite-se.xyz/plantestic/TestScenario')]

[template public generateTestScenario(testScenario : TestScenario) post(trim())]
[comment @main /]
[file ('Test_'.concat(testScenario.name.substituteAll('-', '_').concat('.java')), false, 'UTF-8')]
package com.plantestic.test;

import com.atlassian.oai.validator.restassured.OpenApiValidationFilter;
import io.restassured.RestAssured;
import io.restassured.filter.Filter;
import io.restassured.filter.FilterContext;
import io.restassured.response.Response;
import io.restassured.specification.FilterableRequestSpecification;
import io.restassured.specification.FilterableResponseSpecification;
import org.apache.commons.text.StringSubstitutor;
import org.hamcrest.collection.IsIn;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import static org.hamcrest.Matchers.hasXPath;

public class [ 'Test_'.concat(testScenario.name.substituteAll('-', '_')) /] {

	Map<String, String> paramsMap = new HashMap<>();

	ScriptEngine engine;
	StringSubstitutor substitutor;

    @BeforeEach
	public void setup() {
	    paramsMap = new HashMap<>(System.getenv());
	    substitutor = new StringSubstitutor(paramsMap);
		engine = new ScriptEngineManager().getEngineByName("JavaScript");
	}

    [if (testScenario.variants->notEmpty())]
    [for (variant : Variant | testScenario.variants) ]
    [generateTest(testScenario, variant, testScenario.variants->indexOf(variant).toString()) /]

	[/for]
	[else]
    [generateTest(testScenario, null, '') /]
	[/if]

    /// Helper method to make to templating in string variables above more clean.
	private String subst(String source) {
	    assert substitutor != null;
	    return substitutor.replace(source);
	}

	/// Helper method to make evaluation of conditions more clean.
	private boolean eval(String condition) throws ScriptException {
	    assert engine != null;
	    // First, run the templating engine over the condition.
	    // This is the whole reason why we do this "evaluate a JS string at runtime" at all.
	    String substCondition = subst(condition);
	    // Second, we can simply pipe the string through the JavaScript engine and get a result.
	    return (Boolean) engine.eval(substCondition);
	}
}
[/file]
[/template]

[template private generateTest(testScenario : TestScenario, variant : Variant, nameSuffix : String) post(trim())]
@Test
public void test[ nameSuffix /]() throws ScriptException, InterruptedException {
[if (not variant.oclIsUndefined())]
[for (entry : VariantEntry | variant.entries) ]
    paramsMap.put("[ entry.key /]", "[ entry.value.substituteAll('\"', '\\\"') /]");
[/for]
[/if]

    String tester = paramsMap.get("tester");

	[generateStructures(testScenario.structure)/]
}
[/template]

[template private generateStructures(structures : Collection(Structure)) post(trim())]
[for (structure : Structure | structures) separator('\n') ]
[generateStructure(structure)/]
[/for]
[/template]

[template private generateStructure(structure : Structure) post(trim())]
[if (structure.oclIsTypeOf(TestRoundtrip) or structure.oclIsTypeOf(AsyncTestRoundtrip))]
[generateTestRoundtripWithTesterCheck(structure.oclAsType(TestRoundtrip))/]
[elseif (structure.oclIsTypeOf(Alternative))]
[generateAlternative(structure.oclAsType(Alternative))/]
[elseif (structure.oclIsTypeOf(Delay))]
[generateDelay(structure.oclAsType(Delay))/]
[/if]
[/template]

[template private generateAlternative(alternative : Alternative) post(trim())]
[if (alternative.condition.oclIsUndefined())]
[generateStructures(alternative.provided)/]
[else][if (alternative.provided->isEmpty() and alternative.otherwise->notEmpty())]
if (!eval("[alternative.condition.substituteAll('\"', '\\\"')/]")) {
	[generateStructure(alternative.otherwise)/]
}
[else]
if (eval("[alternative.condition.substituteAll('\"', '\\\"')/]")) {
	[generateStructures(alternative.provided)/]
}[if (alternative.otherwise->notEmpty())] else {
	[generateStructure(alternative.otherwise)/]
}[/if]
[/if][/if]
[/template]

[template private generateDelay(delay : Delay) post(trim())]
[generateSleep(delay.timeinterval)/]
[/template]

[template private generateSleep(timeInterval : TimeInterval) post(trim())]
Thread.sleep([timeInterval.toDuration()/].toMillis());
[/template]

[template private generateTestRoundtripWithTesterCheck(testRoundtrip : TestRoundtrip) post(trim())]
[if (testRoundtrip.oclIsTypeOf(AsyncTestRoundtrip))]
[testRoundtrip.oclAsType(AsyncTestRoundtrip).generateAsyncTestRoundtrip()/]
[else]
if (tester == null || tester.equals("[testRoundtrip.requestspecification.sender.substituteAll('\"', '\\\"')/]")) {
    [testRoundtrip.generateTestRoundtrip()/]
}
[/if]
[/template]

[template private generateAsyncTestRoundtrip(testRoundtrip : AsyncTestRoundtrip) post(trim())]
LocalDate [testRoundtrip.name/]TimeoutDate = LocalDate.now().plus([testRoundtrip.maxTimeout.value/], [testRoundtrip.maxTimeout.unit.toChronoUnit()/]);
for (boolean [testRoundtrip.name/]Done = false; ![testRoundtrip.name/]Done;) {
	try {
		[testRoundtrip.generateTestRoundtrip()/]
		[testRoundtrip.name/]Done = true;
	} catch (AssertionError as) {
		if (LocalDate.now().compareTo([testRoundtrip.name/]TimeoutDate) > 0) {
			throw as;
		} else {
			[testRoundtrip.requestInterval.generateSleep()/]
		}
	}
}
[/template]

[template private toChronoUnit(timeUnit : TimeUnit) post(trim())]
[if (timeUnit = TimeUnit::NANOSECONDS)]
ChronoUnit.NANOS
[elseif (timeUnit = TimeUnit::MICROSECONDS)]
ChronoUnit.MICROS
[elseif (timeUnit = TimeUnit::MILLISECONDS)]
ChronoUnit.MILLIS
[else]
ChronoUnit.[timeUnit.toString()/]
[/if]
[/template]

[template private toDuration(timeInterval : TimeInterval) post(trim())]
[if (timeInterval.unit = TimeUnit::NANOSECONDS)]
Duration.ofNanos([timeInterval.value/])
[elseif (timeInterval.unit = TimeUnit::MICROSECONDS)]
Duration.ofNanos(1000 * [timeInterval.value/])
[elseif (timeInterval.unit = TimeUnit::MILLISECONDS)]
Duration.ofMillis([timeInterval.value/])
[elseif (timeInterval.unit = TimeUnit::SECONDS)]
Duration.ofSeconds([timeInterval.value/])
[elseif (timeInterval.unit = TimeUnit::MINUTES)]
Duration.ofMinutes([timeInterval.value/])
[elseif (timeInterval.unit = TimeUnit::HOURS)]
Duration.ofHours([timeInterval.value/])
[elseif (timeInterval.unit = TimeUnit::DAYS)]
Duration.ofDays([timeInterval.value/])
[/if]
[/template]

[template private generateTestRoundtrip(testRoundtrip : TestRoundtrip) post(trim())]
[if (testRoundtrip.requestspecification.requestdatum->notEmpty())][testRoundtrip.requestspecification.generateAddRequestParams()/]
[/if]
Response [testRoundtrip.name/] = RestAssured.given()
        [testRoundtrip.requestspecification.generateGivenPart(testRoundtrip.requestspecification)/]
    .when()
        [testRoundtrip.requestspecification.generateWhenPart()/]
    .then()
        [testRoundtrip.responsespecification.generateThenPart()/];
[if (testRoundtrip.responsespecification.responsedatum->notEmpty())]
[testRoundtrip.generateExtractions()/]
	[/if]
[/template]

[template private generateAddRequestParams(requestSpecification : RequestSpecification)]
	[if (requestSpecification.requestdatum->notEmpty())]
		[for (requestDatum : RequestDatum | requestSpecification.requestdatum)]
paramsMap.put("[requestDatum.variableName/]", "[requestDatum.value.substituteAll('\"', '\\\"')/]");
		[/for]
	[/if]
[/template]

[template private generateGivenPart(requestSpecification : RequestSpecification) post(trim())]
.auth().basic(subst("${[requestSpecification.receiver/].username}"), subst("${[requestSpecification.receiver/].password}"))
.filter(paramsMap.containsKey("[requestSpecification.receiver/].swagger") ? new OpenApiValidationFilter(subst("${[requestSpecification.receiver/].swagger}")) : (rS, rpS, context) -> context.next(rS, rpS))
	[if (requestSpecification.requestdatum->notEmpty())]
		[for (requestDatum : RequestDatum | requestSpecification.requestdatum)]
.param("[requestDatum.variableName/]", subst("${[requestDatum.variableName/]}"))
		[/for]
	[/if]
[/template]

[template private generateWhenPart(requestSpecification : RequestSpecification) post(trim())]
	.[requestSpecification.method.toLower()/](subst("${[requestSpecification.receiver/].path}") + subst("[requestSpecification.url/]"))
[/template]

[template private generateThenPart(responseSpecification : ResponseSpecification) post(trim())]
	.assertThat()
    [responseSpecification.generateExpectStatusCode()/]
    [responseSpecification.generateExpectations()/]
	.and().extract().response()
[/template]

[template private generateExpectStatusCode(responseSpecification : ResponseSpecification) post(trim())]
	[if (responseSpecification.statuscode->notEmpty())]
.statusCode(IsIn.isIn(Arrays.asList([for (val : Integer | responseSpecification.statuscode) separator (', ')][val/][/for])))
	[/if]
[/template]

[template private generateExpectations(responseSpecification : ResponseSpecification) post(trim())]
	[for (datum : ResponseDatum | responseSpecification.responsedatum)]
.body(hasXPath("[datum.variableName/]"))
	[/for]
[/template]

[template private generateExtractions(testRoundtrip : TestRoundtrip) post(trim())]
	[for (responseDatum : ResponseDatum | testRoundtrip.responsespecification.responsedatum)]
paramsMap.put("[responseDatum.variableName/]", [testRoundtrip.name/].jsonPath().getString("[responseDatum.variableName/]"));
	[/for]
[/template]
