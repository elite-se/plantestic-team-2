import PUMLMessages2TSRoundtrip;
import PUMLPreprocessing;
import PUMLHumanReadable;

import TSTimeUnit;
import TSHumanReadable;

modeltype plantUML "strict" uses plantUML('http://www.elite.xyz/xtext/languages/plantuml/PlantUML');
modeltype testscenario "strict" uses TestScenario('http://elite-se.xyz/TestScenario');

transformation puml2testscenario(in input: plantUML, out output: testscenario);

configuration property diagramName : String;
configuration property verbose : Boolean;

/**
 * DISCLAIMER:
 * THIS CODE WAS CREATED UNDER IMMENSE TIME PRESSURE,
 * NEITHER I NOR ANY OTHER COMMITER FROM GIT BLAME
 * TAKE ANY RESPONSIBILITY; WE WOULD NEVER WRITE CODE 
 * LIKE THIS IN A PROFESSIONAL ENVIRONMENT
 *
 * Have fun with qvt ;)
 */

main() {
    if (verbose) log('Started transforming PlantUML to RequestResponse pairs');

    var variants = input.objectsOfType(Model).variants[SQ_Variant].map transformVariants();
    var asyncconfig = input.objectsOfType(Model).asyncconfigs[SQ_AsyncConfig]->flattenAsyncConfigs();
	if (verbose) log("Output configs: " + variants->size().toString());

    input.objectsOfType(Model).sequence_diagram[SQ_Diagram].map transformUmlDiagram(variants, asyncconfig);
}

// ==============================
//   PUML Variant Transformation
// ==============================

mapping SQ_Variant::transformVariants(): Variant {
    entries := self.entries.map transformVariantEntries();
}

mapping SQ_VariantEntry::transformVariantEntries(): VariantEntry {
    key := self.name;
    value := self.value;
}

// ==============================
//       PUML Async Configs
// ==============================

helper Bag(SQ_AsyncConfig)::flattenAsyncConfigs(): Dict(Integer, SQ_AsyncEntry) {
	var dict := object Dict(Integer, SQ_AsyncEntry) {};
	self->forEach(conf) { 
		conf.entries->forEach(entr) {
			dict->put(entr.asyncid, entr);
		};
	};
	return dict;
}


// ===============================
//   PUML Diagram Transformation
// ===============================

mapping SQ_Diagram::transformUmlDiagram(variants_: Bag(Variant), asyncEntries: Dict(Integer, SQ_AsyncEntry)): TestScenario {
    name := diagramName + "_puml";
    variants := variants_;
    var roundtripCounter : Integer := 1;
    
    if (verbose) log("\n1. Preprocessing:");
    var elements := self.elements->preprocess("")->asList();

	if (verbose) log("\n2. Transform:");
    var prec := object List(SQ_SequenceElement) {};
	structure := elements->toStructures("", 1, prec, asyncEntries).structure;
	
	if (verbose) {
		log("\n==============\n    Result\n==============");
		structure->forEach(struct) { log(struct.humanReadableString("")); };
	}
}

/**
 * Takes a list of SQ_SequenceElements, i.e., a preprocessed PUML file, and transforms
 * it into a list of Structure elements
 * 
 * @param msgPrefix prefix for log messages; used for indentation in verbose printing
 * @param roundtripIdStart next available (globally unique!) roundtrip id
 * @param parentScopePreceeding preceeding SQ_SequenceElements from parent scope, used for request<->response matching
 *
 * @return list of generated Structure elements as well as next available roundtrip id
 */
helper List(SQ_SequenceElement)::toStructures(msgPrefix: String, roundtripIdStart: Integer, parentScopePreceeding: List(SQ_SequenceElement), asyncEntries: Dict(Integer, SQ_AsyncEntry)): Tuple(structure: List(Structure), nextRoundtripId: Integer) {
	if (verbose) log(msgPrefix + "BEGIN STRUCTURES #" + self->size().toString() + " (rtID=" + roundtripIdStart.toString() + ")");

	var structures := object List(Structure) {};
	var nextRoundtripId := roundtripIdStart;
	var elements := self;

	var elemInd := 1;
	while (elemInd <= elements->size()) {
		assert fatal (elemInd >= 0)
			with log('INTERNAL: logic tried accessing index < 0');
	
		var elem := elements->at(elemInd);
		elemInd := elemInd + 1;
		
		// Preceeding are all preceeding from parent scope
		// + all preceeding elements from this scope
		var prec := object List(SQ_SequenceElement) {};
		parentScopePreceeding->forEach(p) {
			prec += p;	
		};
		self->subSequence(1, elemInd-2)->forEach(p) {
			prec += p;
		};
	
		if (elem.oclIsTypeOf(SQ_Message)) {
    		var msg := elem.oclAsType(SQ_Message);
    		if (verbose) log(msgPrefix + "  message(" + elemInd.toString() + "): " + msg.humanReadableString());
    		
    		if (msg.isResponse()) {
				var reqMsg := findRequest(msgPrefix + "    ", msg, prec);
				
				if (not reqMsg.oclIsUndefined()) {
					structures += generateRoundtrip(
    					msgPrefix + "    ", 
    					nextRoundtripId, 
    					reqMsg.deepclone().map message2request(), 
    					msg.payload.response.deepclone().map pumlresponse2tsresponse()
					);
					nextRoundtripId := nextRoundtripId + 1;
				}
    		} elif (msg.isRequest() and not msg.payload.asyncid.oclIsUndefined()) {
    			var asyncID = msg.payload.asyncid;
    			var reqMsg := findAsyncRequest(msgPrefix + "    ", msg, prec);
    			
    			if (not reqMsg.oclIsUndefined()) {
    				var asyncentry := asyncEntries->get(asyncID);
    				assert fatal (not asyncentry.oclIsUndefined())
    					with log("Found no matching configuration for async response, request with id " + asyncID.toString());
    					
    				structures += generateAsyncRoundtrip(
	    				msgPrefix + "    ",
	    				nextRoundtripId,
						asyncentry.deepclone()
					);
					nextRoundtripId := nextRoundtripId + 1;
    			}
    		};
    	} elif (elem.oclIsTypeOf(SQ_Return)) {
    		var ret := elem.oclAsType(SQ_Return);
    		if (verbose) log(msgPrefix + "  return " + ret.humanReadableString());
    		
    		if (not ret.response.oclIsUndefined()) {
    			var reqMsg := findReturnedRequest(msgPrefix + "    ", prec);
    			
    			if (not reqMsg.oclIsUndefined()) {
    				structures += generateRoundtrip(
    					msgPrefix + "    ", 
    					nextRoundtripId, 
    					reqMsg.deepclone().map message2request(), 
    					ret.response.deepclone().map pumlresponse2tsresponse()
					);
					nextRoundtripId := nextRoundtripId + 1;
    			}
    		}
    	} elif (elem.oclIsTypeOf(SQ_Group)) {
    		var grp = elem.oclAsType(SQ_Group);
    		if (verbose) log(msgPrefix + "  " + grp.humanReadableString());
    		
    		var res := grp.toAlternative(msgPrefix + "  ", nextRoundtripId, prec, asyncEntries);
    		structures += res.structure;
    		nextRoundtripId := res.nextRoundtripId;
    	} elif (elem.oclIsTypeOf(SQ_Delay)) {
    		var delay = elem.oclAsType(SQ_Delay);
    		if (verbose) log(msgPrefix + "  " + delay.humanReadableString());
    		structures += object Delay {
    			timeinterval := object TimeInterval {
    				value := delay.wait.time;
    				unit := delay.wait.unit.string2timeUnit();
    			};
    		};
    	}
	};
	
	if (verbose) log(msgPrefix + "END STRUCTURES");
	return Tuple { structure = structures, nextRoundtripId = nextRoundtripId };
}

/**
 * This function transforms SQ_Group with SQ_SequenceElements
 * to Alternative with Roundtrips
 *
 * @param msgPrefix prefix for log messages, used for indentation in debug/verbose printout
 * @param roundtripIdStart first id to be used when generating new roundtrips (must be globally unique)
 * @param parentScopePreceeding SequenceElements from parent scope, used for request<->response matching
 *
 * @returns Alternative structure element with request/responses aswell as total (global!) amount of existing roundtrips
 *			Since roundtripIds are always incremented by 1, this effectively is the next usable roundtrip ID
 */
helper SQ_Group::toAlternative(msgPrefix: String, roundtripIdStart: Integer, parentScopePreceeding: List(SQ_SequenceElement), asyncEntries: Dict(Integer, SQ_AsyncEntry)): Tuple(structure: Alternative, nextRoundtripId: Integer) {
	if (verbose) log(msgPrefix + "TO ALTERNATIVE (hasCond=" + (not self.label.oclIsUndefined()).toString() + ", rdID=" + roundtripIdStart.toString() + ") " + self.humanReadableString());
	var alternative := object Alternative {};

	var res := self.elements->asList()->toStructures(msgPrefix + "  ", roundtripIdStart, parentScopePreceeding, asyncEntries);
	alternative.condition := self.label;
	alternative.provided := res.structure->asOrderedSet();
	var nextRoundtripId := res.nextRoundtripId;

	if (self.alternatives->size() > 0) {
		var alt1 := self.alternatives->at(1);
		var othr := object SQ_Group {
			keyword := self.keyword;
			label := alt1.label;
			alternatives := self.alternatives->subOrderedSet(2, self.alternatives->size());
			elements := alt1.elements;
		};
		
		var res2 := othr.toAlternative(msgPrefix + "  ", nextRoundtripId, parentScopePreceeding, asyncEntries);
		alternative.otherwise := res2.structure;
		nextRoundtripId := res2.nextRoundtripId;
	};
	
	if (verbose) log(msgPrefix + "END ALTERNATIVE");
	return Tuple { structure = alternative, nextRoundtripId = nextRoundtripId };
}