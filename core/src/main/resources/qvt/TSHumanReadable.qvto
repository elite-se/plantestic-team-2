library TSHumanReadable;

modeltype testscenario "strict" uses TestScenario('http://elite-se.xyz/TestScenario');

helper RequestSpecification::humanReadableString(): String {
	if (self.sender.oclIsUndefined()) {
		return "request(method=" + self.method + ", url=\"" + self.url + "\", sender=null" + ", receiver=" + self.receiver + ", requestdatum=" + self.requestdatum->humanReadableString() + ")";
	};
	return "request(method=" + self.method + ", url=\"" + self.url + "\", sender=" + self.sender + ", receiver=" + self.receiver + ", requestdatum=" + self.requestdatum->humanReadableString() + ")";
}

helper ResponseSpecification::humanReadableString(): String {
	var str := "response(";
	
	var codes := self.statuscode;
	var codeInd := 1;
	while (codeInd <= codes->size()) {
		str := str + codes->at(codeInd).toString();
		codeInd := codeInd + 1;
		if (codeInd <= codes->size()) {
			str := str +  " || ";
	 	}
	};
	str := str + ", " + self.responsedatum->humanReadableString() + ")";
	return str;
}

helper OrderedSet(ResponseDatum)::humanReadableString(): String {
    var str := "{";
    var ind := 1;
    while (ind <= self->size()) {
    	var datum := self->at(ind);
		str := str + datum.humanReadableString();
		ind := ind + 1;
		if (ind <= self->size()) {
			str := str + ", ";
		};
    };
	return str + "}";
}

helper ResponseDatum::humanReadableString(): String {
	return self.variableName + ": " + self.value;
}

helper OrderedSet(RequestDatum)::humanReadableString(): String {
    var str := "{";
    var ind := 1;
    while (ind <= self->size()) {
    	var datum := self->at(ind);
		str := str + datum.humanReadableString();
		ind := ind + 1;
		if (ind <= self->size()) {
			str := str + ", ";
		};
    };
	return str + "}";
}

helper RequestDatum::humanReadableString(): String {
	return self.variableName + ": " + self.value;
}

helper Structure::humanReadableString(prefix: String): String {
	return prefix + "Structure";
}

helper TestRoundtrip::humanReadableString(prefix: String): String {
	var intro := prefix + "Roundtrip(" + self.name + "): "; 
	var add := self.requestspecification.humanReadableString() + " => " + self.responsespecification.humanReadableString() + "\n";
	if (not add.oclIsUndefined()) {
		return intro + add;
	} else {
		return intro + "UNDEFINED(rs.method=" 
			+ self.requestspecification.method.oclIsUndefined().toString() 
			+ ", rs.url=" + self.requestspecification.url.oclIsUndefined().toString() 
			+ ", rs.sender=" + self.requestspecification.sender.oclIsUndefined().toString() 
			+ ", rs.receiver=" + self.requestspecification.receiver.oclIsUndefined().toString() 
			+")\n";
	};
}

helper Alternative::humanReadableString(prefix: String): String {
	var str := prefix;
	
	var hasCondition := not self.condition.oclIsUndefined();
	if (hasCondition) {
		str := str + "if (" + self.condition + ") {\n";
	};
	self.provided->forEach(prov) {
		if (hasCondition) {
			str := str + prov.humanReadableString(prefix + "  ");
		} else {
			str := str + prov.humanReadableString(prefix);
		};
	};
	if (hasCondition) {
		str := str + prefix + "}";
	};
	
	if (not self.otherwise.oclIsUndefined()) {
		str := str + " else {\n" + self.otherwise.humanReadableString(prefix + "  ") + prefix + "}";
	};
	str := str + "\n";
	
	return str;
}

helper Delay::humanReadableString(prefix: String): String {
	return prefix + "Delay of " + self.timeinterval.humanReadableString(""); 
}

helper TimeInterval::humanReadableString(prefix: String): String {
	return prefix + "TimeInterval: " + self.value.toString() + " " + self.unit.toString();	
}