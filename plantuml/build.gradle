plugins {
	id "java"
	id "java-library"
	id "idea"
	id "eclipse"
	id "org.xtext.xtend" version "2.0.8"
	id 'maven-publish'
}

sourceSets {
	main {
		java.srcDirs = ['src/main/java', 'src/main/xtext-gen']
		resources.srcDirs = ['src/main/resources', 'src/main/xtext-gen']
		xtendOutputDir = 'src/main/xtend-gen'
	}
	test {
		java.srcDirs = ['src/test/java', 'src/test/xtext-gen']
		resources.srcDirs = ['src/test/resources', 'src/test/xtext-gen']
		xtendOutputDir = 'src/test/xtend-gen'
	}
}

jar {
	from('model') {
		into('model')
	}
	from(sourceSets.main.allSource) {
		include '**/*.xtext'
	}
	manifest {
		attributes 'Bundle-SymbolicName': project.name
	}
}

group = "plantuml"
version = "1.0.0-SNAPSHOT"

ext {
	xtextVersion = "2.18.0"
}

dependencies {
	testImplementation "org.junit.jupiter:junit-jupiter-api"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
	testImplementation "org.eclipse.xtext:org.eclipse.xtext.testing:${xtextVersion}"
	testImplementation "org.eclipse.xtext:org.eclipse.xtext.xbase.testing:${xtextVersion}"
	api "org.eclipse.xtext:org.eclipse.xtext:${xtextVersion}"
	implementation "org.eclipse.xtext:org.eclipse.xtext.xbase:${xtextVersion}"
	implementation platform("org.eclipse.xtext:xtext-dev-bom:${xtextVersion}")
}

configurations {
	mwe2 {
		extendsFrom implementation
	}
	all {
		exclude group: "asm"
	}
}

dependencies {
	mwe2 "org.eclipse.emf:org.eclipse.emf.mwe2.launch:2.11.0"
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.common.types:${xtextVersion}"
	mwe2 "org.eclipse.xtext:org.eclipse.xtext.xtext.generator:${xtextVersion}"
	mwe2 "org.eclipse.xtext:xtext-antlr-generator:2.1.1"
}

task generateXtextLanguage(type: JavaExec) {
	main = "org.eclipse.emf.mwe2.launch.runtime.Mwe2Launcher"
	classpath = configurations.mwe2
	inputs.file "src/main/java/plantuml/GeneratePumlLanguage.mwe2"
	inputs.file "src/main/java/plantuml/PumlLanguage.xtext"
	outputs.dir "src/main/xtext-gen"
	args += "src/main/java/plantuml/GeneratePumlLanguage.mwe2"
	args += "-p"
	args += "rootPath=/${projectDir}/.."
}

test {
	useJUnitPlatform()

	afterTest { desc, result ->
		logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
	}
}

generateXtext.dependsOn(generateXtextLanguage)
clean.dependsOn(cleanGenerateXtextLanguage)
eclipse.classpath.plusConfigurations += [configurations.mwe2]

publishing {
	publications {
		"$project.name"(MavenPublication) {
			groupId project.group
			artifactId project.name
			version project.version
			from components.java
		}
	}
	repositories {
		mavenLocal()
	}
}
